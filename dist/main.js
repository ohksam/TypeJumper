/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/game */ \"./src/scripts/game.js\");\n/* harmony import */ var _scripts_gameplay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/gameplay */ \"./src/scripts/gameplay.js\");\n// this is your entry file - this is what Webpack will read\n\n// import Player from \"./scripts/player\";\n// import Platform from \"./scripts/platform\";\n// import Word from \"./scripts/word\";\n// ^for testing purposes rn. get rid of those once you have things properly imported and set in Game/Gameplay\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext('2d');\n  canvas.width = 1000; // optimize this for 13-inch macbook pro when the\n  canvas.height = 650; // time comes\n\n  const gameplay = new _scripts_gameplay__WEBPACK_IMPORTED_MODULE_1__[\"default\"](ctx).animate();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRWtDO0FBQ1E7QUFFMUNFLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTTtFQUNoRCxNQUFNQyxNQUFNLEdBQUdGLFFBQVEsQ0FBQ0csY0FBYyxDQUFDLFFBQVEsQ0FBQztFQUNoRCxNQUFNQyxHQUFHLEdBQUdGLE1BQU0sQ0FBQ0csVUFBVSxDQUFDLElBQUksQ0FBQztFQUVuQ0gsTUFBTSxDQUFDSSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUU7RUFDdEJKLE1BQU0sQ0FBQ0ssTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFFOztFQUV0QixNQUFNQyxRQUFRLEdBQUcsSUFBSVQseURBQVEsQ0FBQ0ssR0FBRyxDQUFDLENBQUNLLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL1R5cGVySnVtcC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRoaXMgaXMgeW91ciBlbnRyeSBmaWxlIC0gdGhpcyBpcyB3aGF0IFdlYnBhY2sgd2lsbCByZWFkXHJcblxyXG4vLyBpbXBvcnQgUGxheWVyIGZyb20gXCIuL3NjcmlwdHMvcGxheWVyXCI7XHJcbi8vIGltcG9ydCBQbGF0Zm9ybSBmcm9tIFwiLi9zY3JpcHRzL3BsYXRmb3JtXCI7XHJcbi8vIGltcG9ydCBXb3JkIGZyb20gXCIuL3NjcmlwdHMvd29yZFwiO1xyXG4vLyBeZm9yIHRlc3RpbmcgcHVycG9zZXMgcm4uIGdldCByaWQgb2YgdGhvc2Ugb25jZSB5b3UgaGF2ZSB0aGluZ3MgcHJvcGVybHkgaW1wb3J0ZWQgYW5kIHNldCBpbiBHYW1lL0dhbWVwbGF5XHJcblxyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9zY3JpcHRzL2dhbWVcIjtcclxuaW1wb3J0IEdhbWVwbGF5IGZyb20gXCIuL3NjcmlwdHMvZ2FtZXBsYXlcIjtcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcclxuXHJcbiAgICBjYW52YXMud2lkdGggPSAxMDAwOyAgLy8gb3B0aW1pemUgdGhpcyBmb3IgMTMtaW5jaCBtYWNib29rIHBybyB3aGVuIHRoZVxyXG4gICAgY2FudmFzLmhlaWdodCA9IDY1MDsgIC8vIHRpbWUgY29tZXNcclxuXHJcbiAgICBjb25zdCBnYW1lcGxheSA9IG5ldyBHYW1lcGxheShjdHgpLmFuaW1hdGUoKTtcclxufSlcclxuIl0sIm5hbWVzIjpbIkdhbWUiLCJHYW1lcGxheSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiY3R4IiwiZ2V0Q29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwiZ2FtZXBsYXkiLCJhbmltYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./player */ \"./src/scripts/player.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"./src/scripts/platform.js\");\n/* harmony import */ var _word__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./word */ \"./src/scripts/word.js\");\n\n\n\n\n// after you chop off the first word element from your platforms array, .push that into a \"completedWords\" array so that you can keep track of how many words were typed (also this'll help you make sure that your code is working properly)\n// SRS for words that are not perfectly typed, send them back into your wordbank\n// or just make a counter instead of moving the whole word into your array of completedWords. just have completedWords = 0 then ++ when they finish a word.\n\nclass Game {\n  static TEMPWORDBANK = ['nextword', 'thisShouldBreakTheGame']; // this will eventually get replaced by real wordbank (lol)\n  static DEFAULT_POS = {\n    x: 69,\n    y: 69\n  }; // this is probably useless now\n  static START_PLATFORM = new _platform__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('start', {\n    x: 150,\n    y: 600\n  });\n  static NEW_POSITIONS = [{\n    x: 150,\n    y: 300\n  }, {\n    x: 600,\n    y: 300\n  }];\n  constructor(ctx) {\n    this.ctx = ctx;\n    // this.words = []; //this is probably unnecessary\n    this.myQueue = [Game.START_PLATFORM];\n    this.platforms = this.platformsOnScreen();\n    this.player = [new _player__WEBPACK_IMPORTED_MODULE_0__[\"default\"]()];\n    this.currentPlatform = this.platforms[0];\n    this.counter = 0;\n    this.target = this.currentPlatform.word.string.length;\n  }\n  platformsQueue() {\n    // let myQueue = [Game.START_PLATFORM];\n    // debugger\n    this.myQueue.push(this.generateNewPlatform());\n    // console.log(myQueue)\n    return this.myQueue;\n  }\n  platformsOnScreen() {\n    let maxPlats = 2;\n    let screenPlats = [];\n    while (screenPlats.length < maxPlats) {\n      screenPlats.push(this.platformsQueue().shift()); // might not work register on the other function though...\n    }\n    // console.log(screenPlats)\n    return screenPlats;\n  }\n  generateNewPlatform() {\n    let wordString = Game.TEMPWORDBANK.shift(); // this took wordbank word\n\n    // let wordObject = new Word(wordString, Game.NEW_POSITIONS[Math.floor(Math.random() * 2)]); // this took that string and made it a word object and gave it a random position\n\n    let nextPlatform = new _platform__WEBPACK_IMPORTED_MODULE_1__[\"default\"](wordString, Game.NEW_POSITIONS[Math.floor(Math.random() * 2)]);\n    return nextPlatform;\n  }\n  allObjects() {\n    return this.platforms.concat(this.player);\n  }\n  draw(ctx) {\n    // debugger\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = \"#81D5FF\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // debugger\n\n    this.allObjects().forEach(object => {\n      object.draw(ctx);\n    });\n  }\n  handleCorrectKey() {\n    this.counter += 1;\n    if (this.counter === this.target) {\n      this.goNext();\n    }\n    this.currentPlatform.handleCorrectKey();\n  }\n  handleBadKey() {\n    this.counter = 0;\n    this.currentPlatform.handleBadKey();\n  }\n  goNext() {\n    console.log('GG GO NEXT SHIT TEAM');\n    this.platforms.shift();\n    this.player.position = this.currentPlatform.position;\n    // debugger\n  }\n\n  // not currently utilized\n  removeLowestPlatform() {\n    //this could be in Platform - and you \n    this.platforms.shift(); // and you just call it in game instead\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Game);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9nYW1lLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBNkI7QUFDSTtBQUNSOztBQUd6QjtBQUNBO0FBQ0E7O0FBRUEsTUFBTUcsSUFBSSxDQUFDO0VBQ1AsT0FBT0MsWUFBWSxHQUFHLENBQUMsVUFBVSxFQUFFLHdCQUF3QixDQUFDLENBQUMsQ0FBQztFQUM5RCxPQUFPQyxXQUFXLEdBQUc7SUFBQ0MsQ0FBQyxFQUFFLEVBQUU7SUFBRUMsQ0FBQyxFQUFFO0VBQUUsQ0FBQyxFQUFDO0VBQ3BDLE9BQU9DLGNBQWMsR0FBRyxJQUFJUCxpREFBUSxDQUFDLE9BQU8sRUFBRTtJQUFDSyxDQUFDLEVBQUUsR0FBRztJQUFFQyxDQUFDLEVBQUU7RUFBRyxDQUFDLENBQUM7RUFDL0QsT0FBT0UsYUFBYSxHQUFHLENBQUM7SUFBQ0gsQ0FBQyxFQUFFLEdBQUc7SUFBRUMsQ0FBQyxFQUFFO0VBQUcsQ0FBQyxFQUFFO0lBQUNELENBQUMsRUFBRSxHQUFHO0lBQUVDLENBQUMsRUFBRTtFQUFHLENBQUMsQ0FBQztFQUUzREcsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ2IsSUFBSSxDQUFDQSxHQUFHLEdBQUdBLEdBQUc7SUFDZDtJQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHLENBQUNULElBQUksQ0FBQ0ssY0FBYyxDQUFDO0lBQ3BDLElBQUksQ0FBQ0ssU0FBUyxHQUFHLElBQUksQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztJQUN6QyxJQUFJLENBQUNDLE1BQU0sR0FBRyxDQUFDLElBQUlmLCtDQUFNLENBQUQsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQ2dCLGVBQWUsR0FBRyxJQUFJLENBQUNILFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDeEMsSUFBSSxDQUFDSSxPQUFPLEdBQUcsQ0FBQztJQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUNGLGVBQWUsQ0FBQ0csSUFBSSxDQUFDQyxNQUFNLENBQUNDLE1BQU07RUFDekQ7RUFFQUMsY0FBY0EsQ0FBQSxFQUFHO0lBQ2I7SUFDQTtJQUNBLElBQUksQ0FBQ1YsT0FBTyxDQUFDVyxJQUFJLENBQUMsSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDN0M7SUFDQSxPQUFPLElBQUksQ0FBQ1osT0FBTztFQUN2QjtFQUVBRSxpQkFBaUJBLENBQUEsRUFBRztJQUNoQixJQUFJVyxRQUFRLEdBQUcsQ0FBQztJQUNoQixJQUFJQyxXQUFXLEdBQUcsRUFBRTtJQUNwQixPQUFPQSxXQUFXLENBQUNMLE1BQU0sR0FBR0ksUUFBUSxFQUFFO01BQ2xDQyxXQUFXLENBQUNILElBQUksQ0FBQyxJQUFJLENBQUNELGNBQWMsQ0FBQyxDQUFDLENBQUNLLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBQztJQUNwRDtJQUNBO0lBQ0EsT0FBT0QsV0FBVztFQUN0QjtFQUVBRixtQkFBbUJBLENBQUEsRUFBRztJQUNsQixJQUFJSSxVQUFVLEdBQUd6QixJQUFJLENBQUNDLFlBQVksQ0FBQ3VCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFFNUM7O0lBRUEsSUFBSUUsWUFBWSxHQUFHLElBQUk1QixpREFBUSxDQUFDMkIsVUFBVSxFQUFFekIsSUFBSSxDQUFDTSxhQUFhLENBQUNxQixJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUYsT0FBT0gsWUFBWTtFQUN2QjtFQUVBSSxVQUFVQSxDQUFBLEVBQUc7SUFDVCxPQUFPLElBQUksQ0FBQ3BCLFNBQVMsQ0FBQ3FCLE1BQU0sQ0FBQyxJQUFJLENBQUNuQixNQUFNLENBQUM7RUFDN0M7RUFFQW9CLElBQUlBLENBQUN4QixHQUFHLEVBQUU7SUFDTjtJQUNBQSxHQUFHLENBQUN5QixTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRUMsTUFBTSxDQUFDQyxLQUFLLEVBQUVELE1BQU0sQ0FBQ0UsTUFBTSxDQUFDO0lBQ2hENUIsR0FBRyxDQUFDNkIsU0FBUyxHQUFHLFNBQVM7SUFDekI3QixHQUFHLENBQUM4QixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRUosTUFBTSxDQUFDQyxLQUFLLEVBQUVELE1BQU0sQ0FBQ0UsTUFBTSxDQUFDOztJQUUvQzs7SUFFQSxJQUFJLENBQUNOLFVBQVUsQ0FBQyxDQUFDLENBQUNTLE9BQU8sQ0FBRUMsTUFBTSxJQUFLO01BQ2xDQSxNQUFNLENBQUNSLElBQUksQ0FBQ3hCLEdBQUcsQ0FBQztJQUNwQixDQUFDLENBQUM7RUFDTjtFQUVBaUMsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDZixJQUFJLENBQUMzQixPQUFPLElBQUksQ0FBQztJQUNqQixJQUFJLElBQUksQ0FBQ0EsT0FBTyxLQUFLLElBQUksQ0FBQ0MsTUFBTSxFQUFFO01BQzlCLElBQUksQ0FBQzJCLE1BQU0sQ0FBQyxDQUFDO0lBQ2pCO0lBQ0EsSUFBSSxDQUFDN0IsZUFBZSxDQUFDNEIsZ0JBQWdCLENBQUMsQ0FBQztFQUMzQztFQUVBRSxZQUFZQSxDQUFBLEVBQUc7SUFDWCxJQUFJLENBQUM3QixPQUFPLEdBQUcsQ0FBQztJQUNoQixJQUFJLENBQUNELGVBQWUsQ0FBQzhCLFlBQVksQ0FBQyxDQUFDO0VBQ3ZDO0VBRUFELE1BQU1BLENBQUEsRUFBRztJQUNMRSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQztJQUNuQyxJQUFJLENBQUNuQyxTQUFTLENBQUNjLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLElBQUksQ0FBQ1osTUFBTSxDQUFDa0MsUUFBUSxHQUFJLElBQUksQ0FBQ2pDLGVBQWUsQ0FBQ2lDLFFBQVM7SUFDdEQ7RUFDSjs7RUFLQTtFQUNBQyxvQkFBb0JBLENBQUEsRUFBRztJQUFFO0lBQ3JCLElBQUksQ0FBQ3JDLFNBQVMsQ0FBQ2MsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVCO0FBQ0o7O0FBS0EsK0RBQWV4QixJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVHlwZXJKdW1wLy4vc3JjL3NjcmlwdHMvZ2FtZS5qcz9jZGMwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQbGF5ZXIgZnJvbSBcIi4vcGxheWVyXCJcclxuaW1wb3J0IFBsYXRmb3JtIGZyb20gXCIuL3BsYXRmb3JtXCJcclxuaW1wb3J0IFdvcmQgZnJvbSBcIi4vd29yZFwiXHJcblxyXG5cclxuLy8gYWZ0ZXIgeW91IGNob3Agb2ZmIHRoZSBmaXJzdCB3b3JkIGVsZW1lbnQgZnJvbSB5b3VyIHBsYXRmb3JtcyBhcnJheSwgLnB1c2ggdGhhdCBpbnRvIGEgXCJjb21wbGV0ZWRXb3Jkc1wiIGFycmF5IHNvIHRoYXQgeW91IGNhbiBrZWVwIHRyYWNrIG9mIGhvdyBtYW55IHdvcmRzIHdlcmUgdHlwZWQgKGFsc28gdGhpcydsbCBoZWxwIHlvdSBtYWtlIHN1cmUgdGhhdCB5b3VyIGNvZGUgaXMgd29ya2luZyBwcm9wZXJseSlcclxuLy8gU1JTIGZvciB3b3JkcyB0aGF0IGFyZSBub3QgcGVyZmVjdGx5IHR5cGVkLCBzZW5kIHRoZW0gYmFjayBpbnRvIHlvdXIgd29yZGJhbmtcclxuLy8gb3IganVzdCBtYWtlIGEgY291bnRlciBpbnN0ZWFkIG9mIG1vdmluZyB0aGUgd2hvbGUgd29yZCBpbnRvIHlvdXIgYXJyYXkgb2YgY29tcGxldGVkV29yZHMuIGp1c3QgaGF2ZSBjb21wbGV0ZWRXb3JkcyA9IDAgdGhlbiArKyB3aGVuIHRoZXkgZmluaXNoIGEgd29yZC5cclxuXHJcbmNsYXNzIEdhbWUge1xyXG4gICAgc3RhdGljIFRFTVBXT1JEQkFOSyA9IFsnbmV4dHdvcmQnLCAndGhpc1Nob3VsZEJyZWFrVGhlR2FtZSddOyAvLyB0aGlzIHdpbGwgZXZlbnR1YWxseSBnZXQgcmVwbGFjZWQgYnkgcmVhbCB3b3JkYmFuayAobG9sKVxyXG4gICAgc3RhdGljIERFRkFVTFRfUE9TID0ge3g6IDY5LCB5OiA2OX0gLy8gdGhpcyBpcyBwcm9iYWJseSB1c2VsZXNzIG5vd1xyXG4gICAgc3RhdGljIFNUQVJUX1BMQVRGT1JNID0gbmV3IFBsYXRmb3JtKCdzdGFydCcsIHt4OiAxNTAsIHk6IDYwMH0pXHJcbiAgICBzdGF0aWMgTkVXX1BPU0lUSU9OUyA9IFt7eDogMTUwLCB5OiAzMDB9LCB7eDogNjAwLCB5OiAzMDB9XTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjdHgpIHtcclxuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgICAgICAvLyB0aGlzLndvcmRzID0gW107IC8vdGhpcyBpcyBwcm9iYWJseSB1bm5lY2Vzc2FyeVxyXG4gICAgICAgIHRoaXMubXlRdWV1ZSA9IFtHYW1lLlNUQVJUX1BMQVRGT1JNXTtcclxuICAgICAgICB0aGlzLnBsYXRmb3JtcyA9IHRoaXMucGxhdGZvcm1zT25TY3JlZW4oKTtcclxuICAgICAgICB0aGlzLnBsYXllciA9IFtuZXcgUGxheWVyXTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQbGF0Zm9ybSA9IHRoaXMucGxhdGZvcm1zWzBdO1xyXG4gICAgICAgIHRoaXMuY291bnRlciA9IDA7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLmN1cnJlbnRQbGF0Zm9ybS53b3JkLnN0cmluZy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcGxhdGZvcm1zUXVldWUoKSB7XHJcbiAgICAgICAgLy8gbGV0IG15UXVldWUgPSBbR2FtZS5TVEFSVF9QTEFURk9STV07XHJcbiAgICAgICAgLy8gZGVidWdnZXJcclxuICAgICAgICB0aGlzLm15UXVldWUucHVzaCh0aGlzLmdlbmVyYXRlTmV3UGxhdGZvcm0oKSk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cobXlRdWV1ZSlcclxuICAgICAgICByZXR1cm4gdGhpcy5teVF1ZXVlO1xyXG4gICAgfVxyXG5cclxuICAgIHBsYXRmb3Jtc09uU2NyZWVuKCkge1xyXG4gICAgICAgIGxldCBtYXhQbGF0cyA9IDI7XHJcbiAgICAgICAgbGV0IHNjcmVlblBsYXRzID0gW107XHJcbiAgICAgICAgd2hpbGUgKHNjcmVlblBsYXRzLmxlbmd0aCA8IG1heFBsYXRzKSB7XHJcbiAgICAgICAgICAgIHNjcmVlblBsYXRzLnB1c2godGhpcy5wbGF0Zm9ybXNRdWV1ZSgpLnNoaWZ0KCkpIC8vIG1pZ2h0IG5vdCB3b3JrIHJlZ2lzdGVyIG9uIHRoZSBvdGhlciBmdW5jdGlvbiB0aG91Z2guLi5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coc2NyZWVuUGxhdHMpXHJcbiAgICAgICAgcmV0dXJuIHNjcmVlblBsYXRzOyBcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZU5ld1BsYXRmb3JtKCkge1xyXG4gICAgICAgIGxldCB3b3JkU3RyaW5nID0gR2FtZS5URU1QV09SREJBTksuc2hpZnQoKTsgLy8gdGhpcyB0b29rIHdvcmRiYW5rIHdvcmRcclxuXHJcbiAgICAgICAgLy8gbGV0IHdvcmRPYmplY3QgPSBuZXcgV29yZCh3b3JkU3RyaW5nLCBHYW1lLk5FV19QT1NJVElPTlNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMildKTsgLy8gdGhpcyB0b29rIHRoYXQgc3RyaW5nIGFuZCBtYWRlIGl0IGEgd29yZCBvYmplY3QgYW5kIGdhdmUgaXQgYSByYW5kb20gcG9zaXRpb25cclxuXHJcbiAgICAgICAgbGV0IG5leHRQbGF0Zm9ybSA9IG5ldyBQbGF0Zm9ybSh3b3JkU3RyaW5nLCBHYW1lLk5FV19QT1NJVElPTlNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMildKTtcclxuICAgICAgICByZXR1cm4gbmV4dFBsYXRmb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIGFsbE9iamVjdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhdGZvcm1zLmNvbmNhdCh0aGlzLnBsYXllcik7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhjdHgpIHtcclxuICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjODFENUZGXCI7XHJcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIGRlYnVnZ2VyXHJcblxyXG4gICAgICAgIHRoaXMuYWxsT2JqZWN0cygpLmZvckVhY2goKG9iamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBvYmplY3QuZHJhdyhjdHgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNvcnJlY3RLZXkoKSB7XHJcbiAgICAgICAgdGhpcy5jb3VudGVyICs9IDE7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnRlciA9PT0gdGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5nb05leHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGxhdGZvcm0uaGFuZGxlQ29ycmVjdEtleSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUJhZEtleSgpIHtcclxuICAgICAgICB0aGlzLmNvdW50ZXIgPSAwO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFBsYXRmb3JtLmhhbmRsZUJhZEtleSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdvTmV4dCgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnR0cgR08gTkVYVCBTSElUIFRFQU0nKVxyXG4gICAgICAgIHRoaXMucGxhdGZvcm1zLnNoaWZ0KCk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXIucG9zaXRpb24gPSAodGhpcy5jdXJyZW50UGxhdGZvcm0ucG9zaXRpb24pO1xyXG4gICAgICAgIC8vIGRlYnVnZ2VyXHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgLy8gbm90IGN1cnJlbnRseSB1dGlsaXplZFxyXG4gICAgcmVtb3ZlTG93ZXN0UGxhdGZvcm0oKSB7IC8vdGhpcyBjb3VsZCBiZSBpbiBQbGF0Zm9ybSAtIGFuZCB5b3UgXHJcbiAgICAgICAgdGhpcy5wbGF0Zm9ybXMuc2hpZnQoKTsgLy8gYW5kIHlvdSBqdXN0IGNhbGwgaXQgaW4gZ2FtZSBpbnN0ZWFkXHJcbiAgICB9ICAgIFxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lIl0sIm5hbWVzIjpbIlBsYXllciIsIlBsYXRmb3JtIiwiV29yZCIsIkdhbWUiLCJURU1QV09SREJBTksiLCJERUZBVUxUX1BPUyIsIngiLCJ5IiwiU1RBUlRfUExBVEZPUk0iLCJORVdfUE9TSVRJT05TIiwiY29uc3RydWN0b3IiLCJjdHgiLCJteVF1ZXVlIiwicGxhdGZvcm1zIiwicGxhdGZvcm1zT25TY3JlZW4iLCJwbGF5ZXIiLCJjdXJyZW50UGxhdGZvcm0iLCJjb3VudGVyIiwidGFyZ2V0Iiwid29yZCIsInN0cmluZyIsImxlbmd0aCIsInBsYXRmb3Jtc1F1ZXVlIiwicHVzaCIsImdlbmVyYXRlTmV3UGxhdGZvcm0iLCJtYXhQbGF0cyIsInNjcmVlblBsYXRzIiwic2hpZnQiLCJ3b3JkU3RyaW5nIiwibmV4dFBsYXRmb3JtIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYWxsT2JqZWN0cyIsImNvbmNhdCIsImRyYXciLCJjbGVhclJlY3QiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiZm9yRWFjaCIsIm9iamVjdCIsImhhbmRsZUNvcnJlY3RLZXkiLCJnb05leHQiLCJoYW5kbGVCYWRLZXkiLCJjb25zb2xlIiwibG9nIiwicG9zaXRpb24iLCJyZW1vdmVMb3dlc3RQbGF0Zm9ybSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/gameplay.js":
/*!*********************************!*\
  !*** ./src/scripts/gameplay.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/scripts/game.js\");\n// think of what we need to inherit here\n\n\n// THIS SHOULD JUST DETECT KEYBINDS AND START THE ANIMATION LOOP\n\nclass Gameplay {\n  constructor(ctx) {\n    this.ctx = ctx;\n    this.game = new _game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](ctx);\n    this.currentWord = this.game.currentPlatform.word.string; // or this.game.platforms[0].word.string?\n    this.targetWord = this.currentWord;\n    this.bindKeyHandlers();\n  }\n\n  //hypothetically make a start() method which will call animate, bindKey, and wordChecker, which will keep checking currentWord's length and send in a new word/platform/etc once you've typed the word out.\n\n  animate() {\n    // \n    // this.drawBackground(ctx); // this should draw the canvas\n    // this.moveObjects();       // this should update all objects position by the scrollSpeed\n    // debugger\n    this.game.draw(this.ctx); // and this should re-draw all objects after having been scrolled\n    // debugger\n    requestAnimationFrame(this.animate.bind(this));\n  }\n  bindKeyHandlers() {\n    let rightChar = false;\n    document.addEventListener('keydown', e => {\n      const keyPressed = e.key;\n      // let currentWord = this.game.currentWord(); //THIS IS THE ISSUE RN\n      // let nextLetter = currentWord[0];\n\n      console.log(e.key);\n\n      // just use an index reference here instead of mutating the string value in your words\n\n      //why save a separate variable and mutate it when you can just dive in and READ what's already there?\n      // - could save the currentWord to another var and slice that if you wish, but you could also do Game.currentPlatform.word.string[i] or something like\n      // let i = 0;\n      // could also say let currentWord = Game.Platform[0].word.string[i] (LMAO) then do this:\n      // if keyPressed = this.currentWord[i] {\n      // handleCorrectKeyPress()\n      // else \n      // handleBadKeyPress() and then rest i = 0\n      // }\n\n      // if good key press\n      //      Game.handleCorrectKeyPress\n      // else \n      //      Game.handleBadKeyPress\n\n      // let i = 0; // i is going to get reset after every key press so I can't save an i here..\n\n      // let currentWord = this.game.currentPlatform.word.string;\n      // let targetWord = currentWord;\n      if (keyPressed === this.targetWord[0]) {\n        console.log('success'); // for testing\n        this.targetWord = this.targetWord.slice(1);\n        this.game.handleCorrectKey();\n      } else {\n        console.log('miss'); //also for testing\n        this.targetWord = this.currentWord;\n        this.game.handleBadKey();\n      }\n\n      //we're refactoring this right now.\n      // if (keyPressed === this.currentWord[0]) {\n      //     console.log('success')\n      //     this.currentWord = this.currentWord.slice(1);\n      //     // nextLetter = currentWord[0];\n      //     //some logic to change the index value in your letter painting\n      //     // rightChar = true;\n      //     //THIS CODE NEEDS TO GO IN A DIFF FUNCTION, but for now...\n      //     if (this.currentWord.length === 0) {this.game.player.position = {x: 400, y: 400}} \n      //     // ^ that code isn't working. will i need to make a new Player instance when I want to teleport? we'll figure this out in a bit\n      //     } else {\n      //         console.log('miss')\n      // }\n    });\n  }\n\n  // if (currentWord.length === 0) {\n  //     player.position = {\n  //         x: (platforms[1].position.x + platform.width) / 2,\n  //         y: platforms[1].position.y + platform.height\n  //     } \n  //         // change this to make sure player is on top of, not inside, platform\n  //     currentWord = remainingWords.shift();\n  // }\n}\n\n// start() {\n//     this.\n// }\n\n//regarding scrolling... \n// if player.position.y <= 60% canvas height, give all objects extra velocity to scroll them down to ~20? we'll see.\n\n// none of this is needed atm because I'm just teleporting the character to the next plaform, for now\n\n// //\n// // ***REMEMBER THAT THIS IS ALL PLAGIARIZED AT THE MOMENT. MAKE IT YOUR OWN***\n// //\n// animate() { //the animation loop (also contains player movement)\n//     requestAnimationFrame(animate)\n//     ctx.clearRect(0, 0, canvas.width, canvas.height)\n//     player.update()\n//     platforms.forEach(platform => {\n//         platform.draw()\n//     })\n\n//     if (keys.right.pressed && player.position.x < 400) { // added <400 for screen bounds\n//         player.velocity.x = 5\n//     } else if (keys.left.pressed && player.position.x > 100) {\n//         player.velocity.x = -5 \n//     } else {\n//         player.velocity.x = 0\n\n//         if (keys.right.pressed) {\n//             platforms.forEach(platform => {\n//                 platform.position.x -= 5\n//             })\n//             // for your project, put in a background.forEach(river => { river.position.y -= 2}) or something like that for your parallax effect (might not be fully necessary though, tbh)\n//         } else if (keys.left.pressed) {\n//             platforms.forEach(platform => {\n//                 platform.position.x += 5\n//             })\n//         }\n//     }\n\n//     // PLATFORM COLLISION DETECTION\n//     platforms.forEach(platform => {\n//         if (player.position.y + player.height <= platform.position.y && player.position.y + player.height + player.velocity.y >= platform.position.y && player.position.x + player.width >= platform.position.x && player.position.x <= platform.position.x + platform.width) {\n//             player.velocity.y = 0\n//         }\n//     })\n// }\n\n// animate() //this is calling the loop ^\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Gameplay);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9nYW1lcGxheS5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQzBCOztBQUUxQjs7QUFFQSxNQUFNQyxRQUFRLENBQUM7RUFDWEMsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0lBQ2IsSUFBSSxDQUFDQSxHQUFHLEdBQUdBLEdBQUc7SUFDZCxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJSiw2Q0FBSSxDQUFDRyxHQUFHLENBQUM7SUFFekIsSUFBSSxDQUFDRSxXQUFXLEdBQUcsSUFBSSxDQUFDRCxJQUFJLENBQUNFLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQztJQUMxRCxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJLENBQUNKLFdBQVc7SUFDbEMsSUFBSSxDQUFDSyxlQUFlLENBQUMsQ0FBQztFQUMxQjs7RUFFQTs7RUFFQUMsT0FBT0EsQ0FBQSxFQUFHO0lBQUk7SUFDVjtJQUNBO0lBQ0E7SUFDQSxJQUFJLENBQUNQLElBQUksQ0FBQ1EsSUFBSSxDQUFDLElBQUksQ0FBQ1QsR0FBRyxDQUFDLENBQUMsQ0FBSTtJQUM3QjtJQUNBVSxxQkFBcUIsQ0FBQyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ2xEO0VBRUFKLGVBQWVBLENBQUEsRUFBRztJQUNkLElBQUlLLFNBQVMsR0FBRyxLQUFLO0lBQ3JCQyxRQUFRLENBQUNDLGdCQUFnQixDQUFDLFNBQVMsRUFBR0MsQ0FBQyxJQUFLO01BQ3hDLE1BQU1DLFVBQVUsR0FBR0QsQ0FBQyxDQUFDRSxHQUFHO01BQ3hCO01BQ0E7O01BRUFDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSixDQUFDLENBQUNFLEdBQUcsQ0FBQzs7TUFFbEI7O01BRUE7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNJO01BQ0E7TUFDQTtNQUNKOztNQUdBO01BQ0E7TUFDQTtNQUNBOztNQUVBOztNQUVBO01BQ0E7TUFDQSxJQUFJRCxVQUFVLEtBQUssSUFBSSxDQUFDVixVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDbkNZLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDYixVQUFVLEdBQUcsSUFBSSxDQUFDQSxVQUFVLENBQUNjLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDbkIsSUFBSSxDQUFDb0IsZ0JBQWdCLENBQUMsQ0FBQztNQUNoQyxDQUFDLE1BQU07UUFDSEgsT0FBTyxDQUFDQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUNiLFVBQVUsR0FBRyxJQUFJLENBQUNKLFdBQVc7UUFDbEMsSUFBSSxDQUFDRCxJQUFJLENBQUNxQixZQUFZLENBQUMsQ0FBQztNQUM1Qjs7TUFHQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtJQUNKLENBQUMsQ0FBQztFQUNOOztFQUlKO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFHQTs7QUFFSTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFlQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTs7QUFJSiwrREFBZXhCLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UeXBlckp1bXAvLi9zcmMvc2NyaXB0cy9nYW1lcGxheS5qcz83MGI3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRoaW5rIG9mIHdoYXQgd2UgbmVlZCB0byBpbmhlcml0IGhlcmVcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vZ2FtZVwiO1xyXG5cclxuLy8gVEhJUyBTSE9VTEQgSlVTVCBERVRFQ1QgS0VZQklORFMgQU5EIFNUQVJUIFRIRSBBTklNQVRJT04gTE9PUFxyXG5cclxuY2xhc3MgR2FtZXBsYXkge1xyXG4gICAgY29uc3RydWN0b3IoY3R4KSB7XHJcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gbmV3IEdhbWUoY3R4KTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLmN1cnJlbnRXb3JkID0gdGhpcy5nYW1lLmN1cnJlbnRQbGF0Zm9ybS53b3JkLnN0cmluZzsgLy8gb3IgdGhpcy5nYW1lLnBsYXRmb3Jtc1swXS53b3JkLnN0cmluZz9cclxuICAgICAgICB0aGlzLnRhcmdldFdvcmQgPSB0aGlzLmN1cnJlbnRXb3JkO1xyXG4gICAgICAgIHRoaXMuYmluZEtleUhhbmRsZXJzKClcclxuICAgIH1cclxuXHJcbiAgICAvL2h5cG90aGV0aWNhbGx5IG1ha2UgYSBzdGFydCgpIG1ldGhvZCB3aGljaCB3aWxsIGNhbGwgYW5pbWF0ZSwgYmluZEtleSwgYW5kIHdvcmRDaGVja2VyLCB3aGljaCB3aWxsIGtlZXAgY2hlY2tpbmcgY3VycmVudFdvcmQncyBsZW5ndGggYW5kIHNlbmQgaW4gYSBuZXcgd29yZC9wbGF0Zm9ybS9ldGMgb25jZSB5b3UndmUgdHlwZWQgdGhlIHdvcmQgb3V0LlxyXG5cclxuICAgIGFuaW1hdGUoKSB7ICAgLy8gXHJcbiAgICAgICAgLy8gdGhpcy5kcmF3QmFja2dyb3VuZChjdHgpOyAvLyB0aGlzIHNob3VsZCBkcmF3IHRoZSBjYW52YXNcclxuICAgICAgICAvLyB0aGlzLm1vdmVPYmplY3RzKCk7ICAgICAgIC8vIHRoaXMgc2hvdWxkIHVwZGF0ZSBhbGwgb2JqZWN0cyBwb3NpdGlvbiBieSB0aGUgc2Nyb2xsU3BlZWRcclxuICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgIHRoaXMuZ2FtZS5kcmF3KHRoaXMuY3R4KTsgICAgLy8gYW5kIHRoaXMgc2hvdWxkIHJlLWRyYXcgYWxsIG9iamVjdHMgYWZ0ZXIgaGF2aW5nIGJlZW4gc2Nyb2xsZWRcclxuICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGUuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZEtleUhhbmRsZXJzKCkge1xyXG4gICAgICAgIGxldCByaWdodENoYXIgPSBmYWxzZTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qga2V5UHJlc3NlZCA9IGUua2V5O1xyXG4gICAgICAgICAgICAvLyBsZXQgY3VycmVudFdvcmQgPSB0aGlzLmdhbWUuY3VycmVudFdvcmQoKTsgLy9USElTIElTIFRIRSBJU1NVRSBSTlxyXG4gICAgICAgICAgICAvLyBsZXQgbmV4dExldHRlciA9IGN1cnJlbnRXb3JkWzBdO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coZS5rZXkpXHJcblxyXG4gICAgICAgICAgICAvLyBqdXN0IHVzZSBhbiBpbmRleCByZWZlcmVuY2UgaGVyZSBpbnN0ZWFkIG9mIG11dGF0aW5nIHRoZSBzdHJpbmcgdmFsdWUgaW4geW91ciB3b3Jkc1xyXG5cclxuICAgICAgICAgICAgLy93aHkgc2F2ZSBhIHNlcGFyYXRlIHZhcmlhYmxlIGFuZCBtdXRhdGUgaXQgd2hlbiB5b3UgY2FuIGp1c3QgZGl2ZSBpbiBhbmQgUkVBRCB3aGF0J3MgYWxyZWFkeSB0aGVyZT9cclxuICAgICAgICAgICAgLy8gLSBjb3VsZCBzYXZlIHRoZSBjdXJyZW50V29yZCB0byBhbm90aGVyIHZhciBhbmQgc2xpY2UgdGhhdCBpZiB5b3Ugd2lzaCwgYnV0IHlvdSBjb3VsZCBhbHNvIGRvIEdhbWUuY3VycmVudFBsYXRmb3JtLndvcmQuc3RyaW5nW2ldIG9yIHNvbWV0aGluZyBsaWtlXHJcbiAgICAgICAgICAgIC8vIGxldCBpID0gMDtcclxuICAgICAgICAgICAgLy8gY291bGQgYWxzbyBzYXkgbGV0IGN1cnJlbnRXb3JkID0gR2FtZS5QbGF0Zm9ybVswXS53b3JkLnN0cmluZ1tpXSAoTE1BTykgdGhlbiBkbyB0aGlzOlxyXG4gICAgICAgICAgICAvLyBpZiBrZXlQcmVzc2VkID0gdGhpcy5jdXJyZW50V29yZFtpXSB7XHJcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGVDb3JyZWN0S2V5UHJlc3MoKVxyXG4gICAgICAgICAgICAgICAgLy8gZWxzZSBcclxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZUJhZEtleVByZXNzKCkgYW5kIHRoZW4gcmVzdCBpID0gMFxyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gaWYgZ29vZCBrZXkgcHJlc3NcclxuICAgICAgICAgICAgLy8gICAgICBHYW1lLmhhbmRsZUNvcnJlY3RLZXlQcmVzc1xyXG4gICAgICAgICAgICAvLyBlbHNlIFxyXG4gICAgICAgICAgICAvLyAgICAgIEdhbWUuaGFuZGxlQmFkS2V5UHJlc3NcclxuXHJcbiAgICAgICAgICAgIC8vIGxldCBpID0gMDsgLy8gaSBpcyBnb2luZyB0byBnZXQgcmVzZXQgYWZ0ZXIgZXZlcnkga2V5IHByZXNzIHNvIEkgY2FuJ3Qgc2F2ZSBhbiBpIGhlcmUuLlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gbGV0IGN1cnJlbnRXb3JkID0gdGhpcy5nYW1lLmN1cnJlbnRQbGF0Zm9ybS53b3JkLnN0cmluZztcclxuICAgICAgICAgICAgLy8gbGV0IHRhcmdldFdvcmQgPSBjdXJyZW50V29yZDtcclxuICAgICAgICAgICAgaWYgKGtleVByZXNzZWQgPT09IHRoaXMudGFyZ2V0V29yZFswXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N1Y2Nlc3MnKTsgLy8gZm9yIHRlc3RpbmdcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0V29yZCA9IHRoaXMudGFyZ2V0V29yZC5zbGljZSgxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5oYW5kbGVDb3JyZWN0S2V5KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbWlzcycpOyAvL2Fsc28gZm9yIHRlc3RpbmdcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0V29yZCA9IHRoaXMuY3VycmVudFdvcmQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuaGFuZGxlQmFkS2V5KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAvL3dlJ3JlIHJlZmFjdG9yaW5nIHRoaXMgcmlnaHQgbm93LlxyXG4gICAgICAgICAgICAvLyBpZiAoa2V5UHJlc3NlZCA9PT0gdGhpcy5jdXJyZW50V29yZFswXSkge1xyXG4gICAgICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ3N1Y2Nlc3MnKVxyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5jdXJyZW50V29yZCA9IHRoaXMuY3VycmVudFdvcmQuc2xpY2UoMSk7XHJcbiAgICAgICAgICAgIC8vICAgICAvLyBuZXh0TGV0dGVyID0gY3VycmVudFdvcmRbMF07XHJcbiAgICAgICAgICAgIC8vICAgICAvL3NvbWUgbG9naWMgdG8gY2hhbmdlIHRoZSBpbmRleCB2YWx1ZSBpbiB5b3VyIGxldHRlciBwYWludGluZ1xyXG4gICAgICAgICAgICAvLyAgICAgLy8gcmlnaHRDaGFyID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy8gICAgIC8vVEhJUyBDT0RFIE5FRURTIFRPIEdPIElOIEEgRElGRiBGVU5DVElPTiwgYnV0IGZvciBub3cuLi5cclxuICAgICAgICAgICAgLy8gICAgIGlmICh0aGlzLmN1cnJlbnRXb3JkLmxlbmd0aCA9PT0gMCkge3RoaXMuZ2FtZS5wbGF5ZXIucG9zaXRpb24gPSB7eDogNDAwLCB5OiA0MDB9fSBcclxuICAgICAgICAgICAgLy8gICAgIC8vIF4gdGhhdCBjb2RlIGlzbid0IHdvcmtpbmcuIHdpbGwgaSBuZWVkIHRvIG1ha2UgYSBuZXcgUGxheWVyIGluc3RhbmNlIHdoZW4gSSB3YW50IHRvIHRlbGVwb3J0PyB3ZSdsbCBmaWd1cmUgdGhpcyBvdXQgaW4gYSBiaXRcclxuICAgICAgICAgICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ21pc3MnKVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcblxyXG5cclxuLy8gaWYgKGN1cnJlbnRXb3JkLmxlbmd0aCA9PT0gMCkge1xyXG4vLyAgICAgcGxheWVyLnBvc2l0aW9uID0ge1xyXG4vLyAgICAgICAgIHg6IChwbGF0Zm9ybXNbMV0ucG9zaXRpb24ueCArIHBsYXRmb3JtLndpZHRoKSAvIDIsXHJcbi8vICAgICAgICAgeTogcGxhdGZvcm1zWzFdLnBvc2l0aW9uLnkgKyBwbGF0Zm9ybS5oZWlnaHRcclxuLy8gICAgIH0gXHJcbi8vICAgICAgICAgLy8gY2hhbmdlIHRoaXMgdG8gbWFrZSBzdXJlIHBsYXllciBpcyBvbiB0b3Agb2YsIG5vdCBpbnNpZGUsIHBsYXRmb3JtXHJcbi8vICAgICBjdXJyZW50V29yZCA9IHJlbWFpbmluZ1dvcmRzLnNoaWZ0KCk7XHJcbi8vIH1cclxuXHJcblxyXG59XHJcblxyXG4gICAgLy8gc3RhcnQoKSB7XHJcbiAgICAvLyAgICAgdGhpcy5cclxuICAgIC8vIH1cclxuXHJcbiAgICAvL3JlZ2FyZGluZyBzY3JvbGxpbmcuLi4gXHJcbiAgICAvLyBpZiBwbGF5ZXIucG9zaXRpb24ueSA8PSA2MCUgY2FudmFzIGhlaWdodCwgZ2l2ZSBhbGwgb2JqZWN0cyBleHRyYSB2ZWxvY2l0eSB0byBzY3JvbGwgdGhlbSBkb3duIHRvIH4yMD8gd2UnbGwgc2VlLlxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAvLyBub25lIG9mIHRoaXMgaXMgbmVlZGVkIGF0bSBiZWNhdXNlIEknbSBqdXN0IHRlbGVwb3J0aW5nIHRoZSBjaGFyYWN0ZXIgdG8gdGhlIG5leHQgcGxhZm9ybSwgZm9yIG5vd1xyXG5cclxuICAgIC8vIC8vXHJcbiAgICAvLyAvLyAqKipSRU1FTUJFUiBUSEFUIFRISVMgSVMgQUxMIFBMQUdJQVJJWkVEIEFUIFRIRSBNT01FTlQuIE1BS0UgSVQgWU9VUiBPV04qKipcclxuICAgIC8vIC8vXHJcbiAgICAvLyBhbmltYXRlKCkgeyAvL3RoZSBhbmltYXRpb24gbG9vcCAoYWxzbyBjb250YWlucyBwbGF5ZXIgbW92ZW1lbnQpXHJcbiAgICAvLyAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpXHJcbiAgICAvLyAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXHJcbiAgICAvLyAgICAgcGxheWVyLnVwZGF0ZSgpXHJcbiAgICAvLyAgICAgcGxhdGZvcm1zLmZvckVhY2gocGxhdGZvcm0gPT4ge1xyXG4gICAgLy8gICAgICAgICBwbGF0Zm9ybS5kcmF3KClcclxuICAgIC8vICAgICB9KVxyXG4gICAgXHJcbiAgICAvLyAgICAgaWYgKGtleXMucmlnaHQucHJlc3NlZCAmJiBwbGF5ZXIucG9zaXRpb24ueCA8IDQwMCkgeyAvLyBhZGRlZCA8NDAwIGZvciBzY3JlZW4gYm91bmRzXHJcbiAgICAvLyAgICAgICAgIHBsYXllci52ZWxvY2l0eS54ID0gNVxyXG4gICAgLy8gICAgIH0gZWxzZSBpZiAoa2V5cy5sZWZ0LnByZXNzZWQgJiYgcGxheWVyLnBvc2l0aW9uLnggPiAxMDApIHtcclxuICAgIC8vICAgICAgICAgcGxheWVyLnZlbG9jaXR5LnggPSAtNSBcclxuICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICBwbGF5ZXIudmVsb2NpdHkueCA9IDBcclxuICAgIFxyXG4gICAgLy8gICAgICAgICBpZiAoa2V5cy5yaWdodC5wcmVzc2VkKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBwbGF0Zm9ybXMuZm9yRWFjaChwbGF0Zm9ybSA9PiB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgcGxhdGZvcm0ucG9zaXRpb24ueCAtPSA1XHJcbiAgICAvLyAgICAgICAgICAgICB9KVxyXG4gICAgLy8gICAgICAgICAgICAgLy8gZm9yIHlvdXIgcHJvamVjdCwgcHV0IGluIGEgYmFja2dyb3VuZC5mb3JFYWNoKHJpdmVyID0+IHsgcml2ZXIucG9zaXRpb24ueSAtPSAyfSkgb3Igc29tZXRoaW5nIGxpa2UgdGhhdCBmb3IgeW91ciBwYXJhbGxheCBlZmZlY3QgKG1pZ2h0IG5vdCBiZSBmdWxseSBuZWNlc3NhcnkgdGhvdWdoLCB0YmgpXHJcbiAgICAvLyAgICAgICAgIH0gZWxzZSBpZiAoa2V5cy5sZWZ0LnByZXNzZWQpIHtcclxuICAgIC8vICAgICAgICAgICAgIHBsYXRmb3Jtcy5mb3JFYWNoKHBsYXRmb3JtID0+IHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBwbGF0Zm9ybS5wb3NpdGlvbi54ICs9IDVcclxuICAgIC8vICAgICAgICAgICAgIH0pXHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAvLyAgICAgLy8gUExBVEZPUk0gQ09MTElTSU9OIERFVEVDVElPTlxyXG4gICAgLy8gICAgIHBsYXRmb3Jtcy5mb3JFYWNoKHBsYXRmb3JtID0+IHtcclxuICAgIC8vICAgICAgICAgaWYgKHBsYXllci5wb3NpdGlvbi55ICsgcGxheWVyLmhlaWdodCA8PSBwbGF0Zm9ybS5wb3NpdGlvbi55ICYmIHBsYXllci5wb3NpdGlvbi55ICsgcGxheWVyLmhlaWdodCArIHBsYXllci52ZWxvY2l0eS55ID49IHBsYXRmb3JtLnBvc2l0aW9uLnkgJiYgcGxheWVyLnBvc2l0aW9uLnggKyBwbGF5ZXIud2lkdGggPj0gcGxhdGZvcm0ucG9zaXRpb24ueCAmJiBwbGF5ZXIucG9zaXRpb24ueCA8PSBwbGF0Zm9ybS5wb3NpdGlvbi54ICsgcGxhdGZvcm0ud2lkdGgpIHtcclxuICAgIC8vICAgICAgICAgICAgIHBsYXllci52ZWxvY2l0eS55ID0gMFxyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfSlcclxuICAgIC8vIH1cclxuXHJcblxyXG4gICAgLy8gYW5pbWF0ZSgpIC8vdGhpcyBpcyBjYWxsaW5nIHRoZSBsb29wIF5cclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZXBsYXk7Il0sIm5hbWVzIjpbIkdhbWUiLCJHYW1lcGxheSIsImNvbnN0cnVjdG9yIiwiY3R4IiwiZ2FtZSIsImN1cnJlbnRXb3JkIiwiY3VycmVudFBsYXRmb3JtIiwid29yZCIsInN0cmluZyIsInRhcmdldFdvcmQiLCJiaW5kS2V5SGFuZGxlcnMiLCJhbmltYXRlIiwiZHJhdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImJpbmQiLCJyaWdodENoYXIiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwia2V5UHJlc3NlZCIsImtleSIsImNvbnNvbGUiLCJsb2ciLCJzbGljZSIsImhhbmRsZUNvcnJlY3RLZXkiLCJoYW5kbGVCYWRLZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/gameplay.js\n");

/***/ }),

/***/ "./src/scripts/platform.js":
/*!*********************************!*\
  !*** ./src/scripts/platform.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _word__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./word */ \"./src/scripts/word.js\");\n\nclass Platform {\n  static START_X = 200;\n  static BASE_Y = 30;\n  static HEIGHT = 20;\n  static WIDTH = 250;\n  static COUNT = 3; //this should probably be in Game.\n\n  constructor(wordString, position) {\n    this.word = new _word__WEBPACK_IMPORTED_MODULE_0__[\"default\"](wordString, position);\n    this.position = {\n      x: position.x,\n      y: position.y\n    };\n  }\n  draw(ctx) {\n    // do i want to pass platform.draw a position as parameter?\n    // debugger\n    ctx.fillStyle = \"#DEFF55\";\n    ctx.fillRect(this.position.x, this.position.y, Platform.WIDTH, Platform.HEIGHT);\n    // throw in word drawing logic here too\n    this.word.draw(ctx);\n  }\n  handleCorrectKey() {\n    this.word.handleCorrectKey();\n  }\n  handleBadKey() {\n    this.word.handleBadKey();\n  }\n}\n\n// at the very beginning, start with 2 hard-coded platforms in your platforms array, and then run the function addNewPlat() which is going to take the latest platform in your platforms array and then set a new x and y coordinate based off it's position. then it's going to make that new platform object and PUSH it into your platforms array as a queue.\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Platform);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9wbGF0Zm9ybS5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUF5QjtBQUV6QixNQUFNQyxRQUFRLENBQUM7RUFDWCxPQUFPQyxPQUFPLEdBQUcsR0FBRztFQUNwQixPQUFPQyxNQUFNLEdBQUcsRUFBRTtFQUNsQixPQUFPQyxNQUFNLEdBQUcsRUFBRTtFQUNsQixPQUFPQyxLQUFLLEdBQUcsR0FBRztFQUNsQixPQUFPQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0VBRWxCQyxXQUFXQSxDQUFDQyxVQUFVLEVBQUVDLFFBQVEsRUFBRTtJQUM5QixJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJViw2Q0FBSSxDQUFDUSxVQUFVLEVBQUVDLFFBQVEsQ0FBQztJQUMxQyxJQUFJLENBQUNBLFFBQVEsR0FBRztNQUNaRSxDQUFDLEVBQUVGLFFBQVEsQ0FBQ0UsQ0FBQztNQUNiQyxDQUFDLEVBQUVILFFBQVEsQ0FBQ0c7SUFDaEIsQ0FBQztFQUNMO0VBRUFDLElBQUlBLENBQUNDLEdBQUcsRUFBRTtJQUFFO0lBQ1I7SUFDQUEsR0FBRyxDQUFDQyxTQUFTLEdBQUcsU0FBUztJQUN6QkQsR0FBRyxDQUFDRSxRQUFRLENBQUMsSUFBSSxDQUFDUCxRQUFRLENBQUNFLENBQUMsRUFBRSxJQUFJLENBQUNGLFFBQVEsQ0FBQ0csQ0FBQyxFQUFFWCxRQUFRLENBQUNJLEtBQUssRUFBRUosUUFBUSxDQUFDRyxNQUFNLENBQUM7SUFDL0U7SUFDQSxJQUFJLENBQUNNLElBQUksQ0FBQ0csSUFBSSxDQUFDQyxHQUFHLENBQUM7RUFDdkI7RUFFQUcsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDZixJQUFJLENBQUNQLElBQUksQ0FBQ08sZ0JBQWdCLENBQUMsQ0FBQztFQUNoQztFQUVBQyxZQUFZQSxDQUFBLEVBQUc7SUFDWCxJQUFJLENBQUNSLElBQUksQ0FBQ1EsWUFBWSxDQUFDLENBQUM7RUFDNUI7QUFFSjs7QUFHQTs7QUFJQSwrREFBZWpCLFFBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UeXBlckp1bXAvLi9zcmMvc2NyaXB0cy9wbGF0Zm9ybS5qcz84NmRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXb3JkIGZyb20gJy4vd29yZCdcclxuXHJcbmNsYXNzIFBsYXRmb3JtIHtcclxuICAgIHN0YXRpYyBTVEFSVF9YID0gMjAwO1xyXG4gICAgc3RhdGljIEJBU0VfWSA9IDMwO1xyXG4gICAgc3RhdGljIEhFSUdIVCA9IDIwO1xyXG4gICAgc3RhdGljIFdJRFRIID0gMjUwO1xyXG4gICAgc3RhdGljIENPVU5UID0gMzsgLy90aGlzIHNob3VsZCBwcm9iYWJseSBiZSBpbiBHYW1lLlxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHdvcmRTdHJpbmcsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgdGhpcy53b3JkID0gbmV3IFdvcmQod29yZFN0cmluZywgcG9zaXRpb24pO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgIHg6IHBvc2l0aW9uLngsXHJcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uLnlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhjdHgpIHsgLy8gZG8gaSB3YW50IHRvIHBhc3MgcGxhdGZvcm0uZHJhdyBhIHBvc2l0aW9uIGFzIHBhcmFtZXRlcj9cclxuICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNERUZGNTVcIlxyXG4gICAgICAgIGN0eC5maWxsUmVjdCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgUGxhdGZvcm0uV0lEVEgsIFBsYXRmb3JtLkhFSUdIVClcclxuICAgICAgICAvLyB0aHJvdyBpbiB3b3JkIGRyYXdpbmcgbG9naWMgaGVyZSB0b29cclxuICAgICAgICB0aGlzLndvcmQuZHJhdyhjdHgpXHJcbiAgICB9O1xyXG5cclxuICAgIGhhbmRsZUNvcnJlY3RLZXkoKSB7XHJcbiAgICAgICAgdGhpcy53b3JkLmhhbmRsZUNvcnJlY3RLZXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVCYWRLZXkoKSB7XHJcbiAgICAgICAgdGhpcy53b3JkLmhhbmRsZUJhZEtleSgpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8vIGF0IHRoZSB2ZXJ5IGJlZ2lubmluZywgc3RhcnQgd2l0aCAyIGhhcmQtY29kZWQgcGxhdGZvcm1zIGluIHlvdXIgcGxhdGZvcm1zIGFycmF5LCBhbmQgdGhlbiBydW4gdGhlIGZ1bmN0aW9uIGFkZE5ld1BsYXQoKSB3aGljaCBpcyBnb2luZyB0byB0YWtlIHRoZSBsYXRlc3QgcGxhdGZvcm0gaW4geW91ciBwbGF0Zm9ybXMgYXJyYXkgYW5kIHRoZW4gc2V0IGEgbmV3IHggYW5kIHkgY29vcmRpbmF0ZSBiYXNlZCBvZmYgaXQncyBwb3NpdGlvbi4gdGhlbiBpdCdzIGdvaW5nIHRvIG1ha2UgdGhhdCBuZXcgcGxhdGZvcm0gb2JqZWN0IGFuZCBQVVNIIGl0IGludG8geW91ciBwbGF0Zm9ybXMgYXJyYXkgYXMgYSBxdWV1ZS5cclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGxhdGZvcm07XHJcblxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJXb3JkIiwiUGxhdGZvcm0iLCJTVEFSVF9YIiwiQkFTRV9ZIiwiSEVJR0hUIiwiV0lEVEgiLCJDT1VOVCIsImNvbnN0cnVjdG9yIiwid29yZFN0cmluZyIsInBvc2l0aW9uIiwid29yZCIsIngiLCJ5IiwiZHJhdyIsImN0eCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiaGFuZGxlQ29ycmVjdEtleSIsImhhbmRsZUJhZEtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/platform.js\n");

/***/ }),

/***/ "./src/scripts/player.js":
/*!*******************************!*\
  !*** ./src/scripts/player.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass Player {\n  static START_X = 260;\n  static START_Y = 550;\n  constructor() {\n    this.position = {\n      x: Player.START_X,\n      y: Player.START_Y\n    };\n    this.width = 50;\n    this.height = 50;\n  }\n  draw(ctx) {\n    ctx.fillStyle = \"#00FF5B\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Player);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9wbGF5ZXIuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE1BQU0sQ0FBQztFQUNULE9BQU9DLE9BQU8sR0FBRyxHQUFHO0VBQ3BCLE9BQU9DLE9BQU8sR0FBRyxHQUFHO0VBQ3BCQyxXQUFXQSxDQUFBLEVBQUc7SUFDVixJQUFJLENBQUNDLFFBQVEsR0FBRztNQUNaQyxDQUFDLEVBQUVMLE1BQU0sQ0FBQ0MsT0FBTztNQUNqQkssQ0FBQyxFQUFFTixNQUFNLENBQUNFO0lBQ2QsQ0FBQztJQUNELElBQUksQ0FBQ0ssS0FBSyxHQUFHLEVBQUU7SUFDZixJQUFJLENBQUNDLE1BQU0sR0FBRyxFQUFFO0VBQ3BCO0VBRUFDLElBQUlBLENBQUNDLEdBQUcsRUFBRTtJQUNOQSxHQUFHLENBQUNDLFNBQVMsR0FBRyxTQUFTO0lBQ3pCRCxHQUFHLENBQUNFLFFBQVEsQ0FBQyxJQUFJLENBQUNSLFFBQVEsQ0FBQ0MsQ0FBQyxFQUFFLElBQUksQ0FBQ0QsUUFBUSxDQUFDRSxDQUFDLEVBQUUsSUFBSSxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDQyxNQUFNLENBQUM7RUFDM0U7QUFDSjtBQUlBLCtEQUFlUixNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVHlwZXJKdW1wLy4vc3JjL3NjcmlwdHMvcGxheWVyLmpzPzY0NzEiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUGxheWVyIHtcclxuICAgIHN0YXRpYyBTVEFSVF9YID0gMjYwO1xyXG4gICAgc3RhdGljIFNUQVJUX1kgPSA1NTA7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICB4OiBQbGF5ZXIuU1RBUlRfWCxcclxuICAgICAgICAgICAgeTogUGxheWVyLlNUQVJUX1lcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IDUwXHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSA1MFxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoY3R4KSB7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiIzAwRkY1QlwiXHJcbiAgICAgICAgY3R4LmZpbGxSZWN0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodClcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBQbGF5ZXI7Il0sIm5hbWVzIjpbIlBsYXllciIsIlNUQVJUX1giLCJTVEFSVF9ZIiwiY29uc3RydWN0b3IiLCJwb3NpdGlvbiIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJkcmF3IiwiY3R4IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/player.js\n");

/***/ }),

/***/ "./src/scripts/word.js":
/*!*****************************!*\
  !*** ./src/scripts/word.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./platform */ \"./src/scripts/platform.js\");\n\nclass Word {\n  constructor(string, position) {\n    this.string = string;\n    this.position = {\n      x: position.x,\n      y: position.y\n    };\n    this.index = 0;\n  }\n\n  // wordBank = ['peck', 'push', 'coin', 'grim', 'soup', 'clap', 'nail', 'nuts', 'fine', 'walk', 'skelp', 'clock', 'sizes', 'elder', 'thief', 'thine', 'pious', 'dizzy', 'dazed', 'cloud', 'vital', 'these', 'excel', 'dodge', 'cease', 'being', 'pasty', 'abyss', 'hinder', 'alone', 'rewire', 'dragon', 'screwy', 'willed', 'basted', 'seeker', 'wagers', 'rabies', 'knight', 'larynx', 'winery', 'foiled', 'tartar', 'inmate', 'hornet', 'higher', 'deluge', 'zenith', 'hollow', 'mantis', 'tinted', 'infuse', 'planner', 'trussed', 'protium', 'pursuit', 'cogency', 'affable', 'thunder', 'clapped', 'subsale', 'cayenne', 'sifting', 'reorder', 'commend', 'minimum', 'bascule', 'inflict', 'overplan', 'function', 'fathered', 'flimflam', 'veracity', 'tutorial', 'frumpily', 'injuring', 'airliner', 'mistress', 'humoring', 'dressage', 'gemstone', 'gigaflop', 'scorning', 'rocklike', 'defender', 'vocalizes', 'whittling', 'nightmare', 'colosseum', 'confessed', 'debutante', 'insidious', 'micropore', 'omelettes', 'recumbent', 'moderates', 'weaponize', 'gyroscopic', 'dishearten', 'authorized', 'unfaithful', 'unbottling', 'crystalline']\n\n  // remainingWords = wordBank.sort(() => Math.random() - 0.5);\n\n  // currentWord = remainingWords.shift();\n\n  //\n  //on a bad key press, reset the index back to 0\n  //reset index is a WORD function, which has to get called by a \"handleBADkeypress\"\n  //\n\n  //instead of filling text with full string, draw each letter one at a time.\n  // for each letter's position, \n\n  //every word instance will start with this.index = 0\n  //give word class some type of function like \"handleCorrectKeyPress()\"\n  // - gonna take this.index ++\n\n  // THEN TELL PLATFORM IN ITS LOGIC TO ALSO handleCorrectKeyPress()\n  // - on a good key press, tell this.word.handleCorrectKeyPress()\n\n  // utilize a for (i)loop and do \n  // ctx.fillText (this.letters[i], this.position.x + \n  //*platform width/3 +)\n  // if i is less than this.index\n\n  // draw(ctx) {\n  //     for (let i = 0; i <)\n  // }\n\n  draw(ctx) {\n    // debugger\n    ctx.font = '32px Cursive';\n    ctx.fillStyle = '#BF0436';\n    // console.log(this.position)\n    ctx.fillText(this.string, this.position.x + _platform__WEBPACK_IMPORTED_MODULE_0__[\"default\"].WIDTH / 3.3, this.position.y + _platform__WEBPACK_IMPORTED_MODULE_0__[\"default\"].HEIGHT, _platform__WEBPACK_IMPORTED_MODULE_0__[\"default\"].WIDTH);\n\n    // this will be used when highlighting input\n    // ctx.fillStyle = 'blue'\n    // ctx.fillText(this.string.slice(0, 3), this.position.x, this.position.y, Platform.WIDTH)\n\n    // ctx.font = '32px Cursive';\n    // ctx.fillStyle = '#DC35F2';\n    // ctx.fillText('start', 600, 340)//this pos would be same as plat\n    // fillText(text, x, y, maxWidth)//this maxWidth would be platwidth\n  }\n\n  handleCorrectKey() {\n    this.index += 1;\n  }\n  handleBadKey() {\n    this.index = 0;\n  }\n\n  // in the for loop that iterates over the words you want on the screen and draws them... if index === 0, send it do a different draw function(?) that'll highlight with red. other words that you don't want them to type will be written in green or something\n  // then when you're checking key inputs to see if the user has pressed the correct letters, add each letter to a lettersPressed array,\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Word);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy93b3JkLmpzLmpzIiwibWFwcGluZ3MiOiI7O0FBQWtDO0FBRWxDLE1BQU1DLElBQUksQ0FBQztFQUNQQyxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtJQUUxQixJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixJQUFJLENBQUNDLFFBQVEsR0FBRztNQUNaQyxDQUFDLEVBQUVELFFBQVEsQ0FBQ0MsQ0FBQztNQUNiQyxDQUFDLEVBQUVGLFFBQVEsQ0FBQ0U7SUFDaEIsQ0FBQztJQUNELElBQUksQ0FBQ0MsS0FBSyxHQUFHLENBQUM7RUFDbEI7O0VBRUE7O0VBRUE7O0VBRUE7O0VBR0o7RUFDQTtFQUNBO0VBQ0E7O0VBRUk7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7O0VBRUFDLElBQUlBLENBQUNDLEdBQUcsRUFBRTtJQUNOO0lBQ0FBLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHLGNBQWM7SUFDekJELEdBQUcsQ0FBQ0UsU0FBUyxHQUFHLFNBQVM7SUFDekI7SUFDQUYsR0FBRyxDQUFDRyxRQUFRLENBQUMsSUFBSSxDQUFDVCxNQUFNLEVBQUUsSUFBSSxDQUFDQyxRQUFRLENBQUNDLENBQUMsR0FBR0wsdURBQWMsR0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDSSxRQUFRLENBQUNFLENBQUMsR0FBR04sd0RBQWUsRUFBRUEsdURBQWMsQ0FBQzs7SUFFbEg7SUFDQTtJQUNBOztJQUdBO0lBQ0E7SUFDQTtJQUNBO0VBQ0o7O0VBRUFlLGdCQUFnQkEsQ0FBQSxFQUFHO0lBQ2YsSUFBSSxDQUFDUixLQUFLLElBQUksQ0FBQztFQUVuQjtFQUVBUyxZQUFZQSxDQUFBLEVBQUc7SUFDWCxJQUFJLENBQUNULEtBQUssR0FBRyxDQUFDO0VBRWxCOztFQUVBO0VBQ0E7QUFJSjs7QUFHQSwrREFBZU4sSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL1R5cGVySnVtcC8uL3NyYy9zY3JpcHRzL3dvcmQuanM/ODcyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGxhdGZvcm0gZnJvbSBcIi4vcGxhdGZvcm1cIjtcclxuXHJcbmNsYXNzIFdvcmQge1xyXG4gICAgY29uc3RydWN0b3Ioc3RyaW5nLCBwb3NpdGlvbikge1xyXG5cclxuICAgICAgICB0aGlzLnN0cmluZyA9IHN0cmluZztcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0ge1xyXG4gICAgICAgICAgICB4OiBwb3NpdGlvbi54LFxyXG4gICAgICAgICAgICB5OiBwb3NpdGlvbi55XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHdvcmRCYW5rID0gWydwZWNrJywgJ3B1c2gnLCAnY29pbicsICdncmltJywgJ3NvdXAnLCAnY2xhcCcsICduYWlsJywgJ251dHMnLCAnZmluZScsICd3YWxrJywgJ3NrZWxwJywgJ2Nsb2NrJywgJ3NpemVzJywgJ2VsZGVyJywgJ3RoaWVmJywgJ3RoaW5lJywgJ3Bpb3VzJywgJ2Rpenp5JywgJ2RhemVkJywgJ2Nsb3VkJywgJ3ZpdGFsJywgJ3RoZXNlJywgJ2V4Y2VsJywgJ2RvZGdlJywgJ2NlYXNlJywgJ2JlaW5nJywgJ3Bhc3R5JywgJ2FieXNzJywgJ2hpbmRlcicsICdhbG9uZScsICdyZXdpcmUnLCAnZHJhZ29uJywgJ3NjcmV3eScsICd3aWxsZWQnLCAnYmFzdGVkJywgJ3NlZWtlcicsICd3YWdlcnMnLCAncmFiaWVzJywgJ2tuaWdodCcsICdsYXJ5bngnLCAnd2luZXJ5JywgJ2ZvaWxlZCcsICd0YXJ0YXInLCAnaW5tYXRlJywgJ2hvcm5ldCcsICdoaWdoZXInLCAnZGVsdWdlJywgJ3plbml0aCcsICdob2xsb3cnLCAnbWFudGlzJywgJ3RpbnRlZCcsICdpbmZ1c2UnLCAncGxhbm5lcicsICd0cnVzc2VkJywgJ3Byb3RpdW0nLCAncHVyc3VpdCcsICdjb2dlbmN5JywgJ2FmZmFibGUnLCAndGh1bmRlcicsICdjbGFwcGVkJywgJ3N1YnNhbGUnLCAnY2F5ZW5uZScsICdzaWZ0aW5nJywgJ3Jlb3JkZXInLCAnY29tbWVuZCcsICdtaW5pbXVtJywgJ2Jhc2N1bGUnLCAnaW5mbGljdCcsICdvdmVycGxhbicsICdmdW5jdGlvbicsICdmYXRoZXJlZCcsICdmbGltZmxhbScsICd2ZXJhY2l0eScsICd0dXRvcmlhbCcsICdmcnVtcGlseScsICdpbmp1cmluZycsICdhaXJsaW5lcicsICdtaXN0cmVzcycsICdodW1vcmluZycsICdkcmVzc2FnZScsICdnZW1zdG9uZScsICdnaWdhZmxvcCcsICdzY29ybmluZycsICdyb2NrbGlrZScsICdkZWZlbmRlcicsICd2b2NhbGl6ZXMnLCAnd2hpdHRsaW5nJywgJ25pZ2h0bWFyZScsICdjb2xvc3NldW0nLCAnY29uZmVzc2VkJywgJ2RlYnV0YW50ZScsICdpbnNpZGlvdXMnLCAnbWljcm9wb3JlJywgJ29tZWxldHRlcycsICdyZWN1bWJlbnQnLCAnbW9kZXJhdGVzJywgJ3dlYXBvbml6ZScsICdneXJvc2NvcGljJywgJ2Rpc2hlYXJ0ZW4nLCAnYXV0aG9yaXplZCcsICd1bmZhaXRoZnVsJywgJ3VuYm90dGxpbmcnLCAnY3J5c3RhbGxpbmUnXVxyXG5cclxuICAgIC8vIHJlbWFpbmluZ1dvcmRzID0gd29yZEJhbmsuc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcclxuXHJcbiAgICAvLyBjdXJyZW50V29yZCA9IHJlbWFpbmluZ1dvcmRzLnNoaWZ0KCk7XHJcblxyXG5cclxuLy9cclxuLy9vbiBhIGJhZCBrZXkgcHJlc3MsIHJlc2V0IHRoZSBpbmRleCBiYWNrIHRvIDBcclxuLy9yZXNldCBpbmRleCBpcyBhIFdPUkQgZnVuY3Rpb24sIHdoaWNoIGhhcyB0byBnZXQgY2FsbGVkIGJ5IGEgXCJoYW5kbGVCQURrZXlwcmVzc1wiXHJcbi8vXHJcblxyXG4gICAgLy9pbnN0ZWFkIG9mIGZpbGxpbmcgdGV4dCB3aXRoIGZ1bGwgc3RyaW5nLCBkcmF3IGVhY2ggbGV0dGVyIG9uZSBhdCBhIHRpbWUuXHJcbiAgICAvLyBmb3IgZWFjaCBsZXR0ZXIncyBwb3NpdGlvbiwgXHJcblxyXG4gICAgLy9ldmVyeSB3b3JkIGluc3RhbmNlIHdpbGwgc3RhcnQgd2l0aCB0aGlzLmluZGV4ID0gMFxyXG4gICAgLy9naXZlIHdvcmQgY2xhc3Mgc29tZSB0eXBlIG9mIGZ1bmN0aW9uIGxpa2UgXCJoYW5kbGVDb3JyZWN0S2V5UHJlc3MoKVwiXHJcbiAgICAvLyAtIGdvbm5hIHRha2UgdGhpcy5pbmRleCArK1xyXG5cclxuICAgIC8vIFRIRU4gVEVMTCBQTEFURk9STSBJTiBJVFMgTE9HSUMgVE8gQUxTTyBoYW5kbGVDb3JyZWN0S2V5UHJlc3MoKVxyXG4gICAgLy8gLSBvbiBhIGdvb2Qga2V5IHByZXNzLCB0ZWxsIHRoaXMud29yZC5oYW5kbGVDb3JyZWN0S2V5UHJlc3MoKVxyXG5cclxuICAgIC8vIHV0aWxpemUgYSBmb3IgKGkpbG9vcCBhbmQgZG8gXHJcbiAgICAvLyBjdHguZmlsbFRleHQgKHRoaXMubGV0dGVyc1tpXSwgdGhpcy5wb3NpdGlvbi54ICsgXHJcbiAgICAvLypwbGF0Zm9ybSB3aWR0aC8zICspXHJcbiAgICAvLyBpZiBpIGlzIGxlc3MgdGhhbiB0aGlzLmluZGV4XHJcblxyXG4gICAgLy8gZHJhdyhjdHgpIHtcclxuICAgIC8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8KVxyXG4gICAgLy8gfVxyXG5cclxuICAgIGRyYXcoY3R4KSB7XHJcbiAgICAgICAgLy8gZGVidWdnZXJcclxuICAgICAgICBjdHguZm9udCA9ICczMnB4IEN1cnNpdmUnO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0JGMDQzNic7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5wb3NpdGlvbilcclxuICAgICAgICBjdHguZmlsbFRleHQodGhpcy5zdHJpbmcsIHRoaXMucG9zaXRpb24ueCArIFBsYXRmb3JtLldJRFRILzMuMywgdGhpcy5wb3NpdGlvbi55ICsgUGxhdGZvcm0uSEVJR0hULCBQbGF0Zm9ybS5XSURUSClcclxuXHJcbiAgICAgICAgLy8gdGhpcyB3aWxsIGJlIHVzZWQgd2hlbiBoaWdobGlnaHRpbmcgaW5wdXRcclxuICAgICAgICAvLyBjdHguZmlsbFN0eWxlID0gJ2JsdWUnXHJcbiAgICAgICAgLy8gY3R4LmZpbGxUZXh0KHRoaXMuc3RyaW5nLnNsaWNlKDAsIDMpLCB0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgUGxhdGZvcm0uV0lEVEgpXHJcblxyXG5cclxuICAgICAgICAvLyBjdHguZm9udCA9ICczMnB4IEN1cnNpdmUnO1xyXG4gICAgICAgIC8vIGN0eC5maWxsU3R5bGUgPSAnI0RDMzVGMic7XHJcbiAgICAgICAgLy8gY3R4LmZpbGxUZXh0KCdzdGFydCcsIDYwMCwgMzQwKS8vdGhpcyBwb3Mgd291bGQgYmUgc2FtZSBhcyBwbGF0XHJcbiAgICAgICAgLy8gZmlsbFRleHQodGV4dCwgeCwgeSwgbWF4V2lkdGgpLy90aGlzIG1heFdpZHRoIHdvdWxkIGJlIHBsYXR3aWR0aFxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNvcnJlY3RLZXkoKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCArPSAxO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVCYWRLZXkoKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIGluIHRoZSBmb3IgbG9vcCB0aGF0IGl0ZXJhdGVzIG92ZXIgdGhlIHdvcmRzIHlvdSB3YW50IG9uIHRoZSBzY3JlZW4gYW5kIGRyYXdzIHRoZW0uLi4gaWYgaW5kZXggPT09IDAsIHNlbmQgaXQgZG8gYSBkaWZmZXJlbnQgZHJhdyBmdW5jdGlvbig/KSB0aGF0J2xsIGhpZ2hsaWdodCB3aXRoIHJlZC4gb3RoZXIgd29yZHMgdGhhdCB5b3UgZG9uJ3Qgd2FudCB0aGVtIHRvIHR5cGUgd2lsbCBiZSB3cml0dGVuIGluIGdyZWVuIG9yIHNvbWV0aGluZ1xyXG4gICAgLy8gdGhlbiB3aGVuIHlvdSdyZSBjaGVja2luZyBrZXkgaW5wdXRzIHRvIHNlZSBpZiB0aGUgdXNlciBoYXMgcHJlc3NlZCB0aGUgY29ycmVjdCBsZXR0ZXJzLCBhZGQgZWFjaCBsZXR0ZXIgdG8gYSBsZXR0ZXJzUHJlc3NlZCBhcnJheSxcclxuXHJcblxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFdvcmQ7Il0sIm5hbWVzIjpbIlBsYXRmb3JtIiwiV29yZCIsImNvbnN0cnVjdG9yIiwic3RyaW5nIiwicG9zaXRpb24iLCJ4IiwieSIsImluZGV4IiwiZHJhdyIsImN0eCIsImZvbnQiLCJmaWxsU3R5bGUiLCJmaWxsVGV4dCIsIldJRFRIIiwiSEVJR0hUIiwiaGFuZGxlQ29ycmVjdEtleSIsImhhbmRsZUJhZEtleSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/word.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UeXBlckp1bXAvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;